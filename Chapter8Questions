


1. Relative paths are relative to the current working directory.
2. Absolute paths start with the root folder, such as / or C:\.
3. The os.getcwd() function returns the current working directory. The os.chdir() function changes the current working directory.
4. The . folder is the current folder, and .. is the parent folder.
5. C:\bacon\eggs is the dir name, while spam.txt is the base name.
6. The string 'r' for read mode, 'w' for write mode, and 'a' for append mode
7. An existing file opened in write mode is erased and completely overwritten.
8. The read() method returns the file’s entire contents as a single string value. The readlines() method returns a list of strings, 
where each string is a line from the file’s contents.
9. A shelf value resembles a dictionary value; 
it has keys and values, along with keys() and values() methods that work similarly to the dictionary methods of the same names.


regex program that opens all .txt files in a folder and searches for any line that matches a user-supplied regular expression. 
The results should be printed to the screen: 

import re
import os
import pprint
currentFolder = "C:\\\\"
txtCount = 0
newDirectory = True
while True:
    if newDirectory:
        txts = []
        txtCount = 0
        direct = os.listdir(currentFolder)
        for file in direct:
            newDirectory = False
            txt = re.search("\.txt$", file)
            if txt is not None:
                txts.append(currentFolder+file)
                txtCount += 1
    print("There are "+str(txtCount)+" text files in this directory.")
    task = input("You are in " + currentFolder + ". Type in directory or search txt files. ")
    if task == "search":
        searchterm = re.compile(input("Type in a search. "))
        for file in txts:
            print(file)
            currentFile = open(file)
            print(searchterm.findall(currentFile.read()))
    elif task == "look":
        pprint.pprint(direct)
    elif task in direct:
        backslash = re.compile(r"\\$")
        if backslash.search(currentFolder):
            print("backslash found")
            x = currentFolder + task
            print(x)
        else:
            x = currentFolder + "\\" + task
            print(x)
        if os.path.isdir(x):
            currentFolder = x
            newDirectory = True
        else:
            print("That is not a directory.")
    elif os.path.isdir(task):
        currentFolder = task
        newDirectory = True
    else:
        print("That is not a directory.")

